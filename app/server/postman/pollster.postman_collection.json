{
	"info": {
		"_postman_id": "7083763e-fcd6-4787-9be8-6672e79a0a91",
		"name": "pollster",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test reset",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{hostTest}}/api/test/reset",
					"host": [
						"{{hostTest}}"
					],
					"path": [
						"api",
						"test",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsupported API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 404', () => {",
							"    pm.response.to.have.status (404);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/api/nothing",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"nothing"
					]
				}
			},
			"response": []
		},
		{
			"name": "User: Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"name\": \"Amy Brown\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "User: Login new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('user key to be 4, theme to be light', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.key).to.eq (4);",
							"    pm.expect (data.theme).to.eq ('light');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User: Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauth: Get polls",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('poll count to be 3', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.page).to.eq (0);",
							"    pm.expect (data.count).to.eq (3);",
							"    pm.expect (data.polls).length (3);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/polls",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('user key to be 1', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.key).to.equal (1);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"a@example.com\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('verify initial profile data', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.name).to.eq ('A A');",
							"    pm.expect (data.theme).to.eq ('light');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/profile",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('verify updated profile data', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.name).to.eq ('B B');",
							"    pm.expect (data.theme).to.eq ('dark');",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"B B\",\n    \"theme\": \"dark\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/profile",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify profile update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('verify updated profile data', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.name).to.eq ('B B');",
							"    pm.expect (data.theme).to.eq ('dark');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/profile",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get polls, initial",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('poll count to be 3', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.polls).length (3);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/polls",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create poll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('populated poll', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        creator: 1,",
							"        title: 'T4',",
							"        choices: [",
							"            { text: '1', votes: 0 },",
							"            { text: '2', votes: 0 },",
							"            { text: '3', votes: 0 },",
							"        ],",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"T4\",\n    \"choices\": [\"1\", \"2\", \"3\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/polls",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get polls, verify addition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('poll count to be 4', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.count).to.eq (4);",
							"})",
							"",
							"pm.test ('new poll exists, with have expected data', () => {",
							"    var data = pm.response.json ();",
							"    var t = data.polls.find ((a) => a.title === 'T4');",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        creator: 1,",
							"        title: 'T4',",
							"        choices: [",
							"            { text: '1', votes: 0 },",
							"            { text: '2', votes: 0 },",
							"            { text: '3', votes: 0 },",
							"        ],",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/polls",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update poll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('verify content of updated poll', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        creator: 1,",
							"        title: 'T4u',",
							"        choices: [",
							"            { text: '1', votes: 0 },",
							"            { text: '2', votes: 0 },",
							"            { text: '3', votes: 0 },",
							"            { text: '4', votes: 0 },",
							"        ],",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"T4u\",\n    \"choices\": [\"1\", \"2\", \"3\", \"4\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/polls/4",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get poll, verify update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('updated poll to have expected data', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        creator: 1,",
							"        title: 'T4u',",
							"        choices: [",
							"            { text: '1', votes: 0 },",
							"            { text: '2', votes: 0 },",
							"            { text: '3', votes: 0 },",
							"            { text: '4', votes: 0 },",
							"        ],",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/polls/4",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete poll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/polls/4",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get polls, verify list after deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('poll count to be 3', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.count).to.eq (3);",
							"})",
							"",
							"pm.test ('not to include poll with key=4', () => {",
							"    var data = pm.response.json ();",
							"    var t = data.polls.find ((a) => a.key === 4);",
							"    pm.expect (t).to.be.undefined;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/polls",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"polls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}